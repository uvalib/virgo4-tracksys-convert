<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://www.vraweb.org/vracore4.htm"
  xsi:schemaLocation="http://www.vraweb.org/vracore4.htm http://www.loc.gov/standards/vracore/vra-strict.xsd"
  exclude-result-prefixes="#all" version="2.0">

  <xsl:output method="xml" indent="yes"/>

  <!-- program name -->
  <xsl:variable name="progname">
    <xsl:text>jmurrayhoward2vra.xsl</xsl:text>
  </xsl:variable>

  <!-- program version -->
  <xsl:variable name="version">
    <xsl:text>0.3 beta</xsl:text>
  </xsl:variable>

  <!-- new line -->
  <xsl:variable name="nl">
    <xsl:text>&#xa;</xsl:text>
  </xsl:variable>

  <xsl:template match="/">
    <!-- Expand multi-valued elements -->
    <xsl:variable name="pass1">
      <xsl:apply-templates mode="pass1"/>
    </xsl:variable>
    <!--<xsl:copy-of select="$pass1"/>-->

    <!-- Group images by work_title -->
    <xsl:variable name="pass2">
      <vra>
        <xsl:for-each-group select="$pass1//*:image" group-by="*:Work_Title">
          <xsl:sort select="*:Work_Title"/>
          <collection>
            <work>
              <xsl:attribute name="id">
                <xsl:value-of select="concat('w_', position())"/>
              </xsl:attribute>
              <title>
                <xsl:value-of select="current-grouping-key()"/>
              </title>
            </work>
            <xsl:apply-templates select="current-group()"/>
          </collection>
        </xsl:for-each-group>
      </vra>
    </xsl:variable>
    <!--<xsl:copy-of select="$pass2"/>-->

    <!-- Refine work-level data -->
    <xsl:variable name="pass3">
      <xsl:apply-templates select="$pass2" mode="pass3"/>
    </xsl:variable>
    <!--<xsl:copy-of select="$pass3"/>-->

    <!-- Refine original- and image-level data -->
    <xsl:variable name="pass4">
      <xsl:apply-templates select="$pass3" mode="pass4"/>
    </xsl:variable>
    <!--<xsl:copy-of select="$pass4"/>-->
    <!--<xsl:message terminate="yes"/>-->

    <!-- Refine work-to-work relations -->
    <xsl:variable name="pass5">
      <xsl:apply-templates select="$pass4" mode="pass5"/>
    </xsl:variable>
    <xsl:comment>&#32;Generated by <xsl:value-of select="concat($progname, ', v. ', $version, ' ', format-dateTime(current-dateTime(), '[Y]-[M01]-[D01]T[H01]:[m01]'), ' ')"/></xsl:comment>
    <xsl:copy-of select="$pass5"/>

  </xsl:template>

  <xsl:template match="*:relationSet" mode="pass5">
    <relationSet>
      <xsl:for-each select="*:relation">
        <xsl:variable name="thisValue">
          <xsl:value-of select="."/>
        </xsl:variable>
        <xsl:choose>
          <xsl:when test="@relids">
            <xsl:copy-of select="."/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:if test="ancestor::*:vra/*:work[*:titleSet/*:title[1] eq $thisValue]">
              <xsl:copy>
                <xsl:apply-templates select="@*"/>
                <xsl:attribute name="relids">
                  <xsl:value-of
                    select="ancestor::*:vra/*:work[*:titleSet/*:title[1] eq $thisValue]/@id"/>
                </xsl:attribute>
                <xsl:value-of select="$thisValue"/>
              </xsl:copy>
            </xsl:if>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
    </relationSet>
  </xsl:template>

  <xsl:template match="*:worktype[matches(., 'photographs')]" mode="pass5">
    <xsl:copy>
      <xsl:apply-templates select="@*"/>
      <xsl:text>still image</xsl:text>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="*:vra" mode="pass4">
    <vra xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns="http://www.vraweb.org/vracore4.htm"
      xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
      xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xsi:schemaLocation="http://www.vraweb.org/vracore4.htm http://www.loc.gov/standards/vracore/vra-strict.xsd">
      <xsl:apply-templates mode="pass4"/>
    </vra>
  </xsl:template>

  <xsl:template match="*:collection" mode="pass4">
    <xsl:comment>&#32;Built work&#32;</xsl:comment>
    <xsl:copy-of select="*:work"/>
    <xsl:for-each select="*:image">
      <xsl:comment>&#32;Photograph/slide&#32;</xsl:comment>
      <work>
        <xsl:attribute name="id">
          <xsl:value-of select="concat('w_', replace(*:SSID, '[^\c]', '_'))"/>
        </xsl:attribute>
        <xsl:variable name="agentSet">
          <agentSet>
            <xsl:if test="count(*:Photographer) &gt; 1">
              <display>
                <xsl:value-of select="string-join(*:Photographer, ' or ')"/>
              </display>
            </xsl:if>
            <xsl:for-each select="*:Photographer">
              <agent>
                <name>
                  <xsl:value-of select="."/>
                </name>
                <role>Photographer</role>
                <xsl:if test="matches(., 'Murray Howard')">
                  <role>Architect for Historic Buildings and Grounds, University of Virginia</role>
                </xsl:if>
              </agent>
            </xsl:for-each>
          </agentSet>
        </xsl:variable>
        <xsl:if test="normalize-space($agentSet) ne ''">
          <xsl:copy-of select="$agentSet"/>
        </xsl:if>
        <xsl:variable name="dateSet">
          <dateSet>
            <display>
              <xsl:value-of select="*:Image_Date"/>
            </display>
            <date type="creation">
              <earliestDate>
                <xsl:value-of select="*:Image_Date"/>
              </earliestDate>
              <latestDate>
                <xsl:value-of select="*:Image_Date"/>
              </latestDate>
            </date>
          </dateSet>
        </xsl:variable>
        <xsl:if test="normalize-space($dateSet) ne ''">
          <xsl:copy-of select="$dateSet"/>
        </xsl:if>
        <xsl:variable name="descSet">
          <descriptionSet>
            <description>
              <xsl:value-of select="*:Image_View_Description"/>
            </description>
          </descriptionSet>
        </xsl:variable>
        <xsl:if test="normalize-space($descSet) ne ''">
          <xsl:copy-of select="$descSet"/>
        </xsl:if>
        <locationSet>
          <location type="repository">
            <name>James Murray Howard University of Virginia Historic Buildings and Grounds
              Collection, University of Virginia Library</name>
            <xsl:for-each select="*:ID_Number | *:Accession_Number">
              <refid>
                <xsl:value-of select="normalize-space(.)"/>
              </refid>
            </xsl:for-each>
          </location>
        </locationSet>
        <relationSet>
          <xsl:if test="not(exists(*:Work_Type[matches(., 'photographs')]))">
            <relation type="depicts">
              <xsl:attribute name="relids">
                <xsl:value-of select="ancestor::*:collection/*:work/@id"/>
              </xsl:attribute>
            </relation>
          </xsl:if>
          <xsl:for-each select="*:Related_Work">
            <xsl:variable name="thisValue">
              <xsl:value-of select="."/>
            </xsl:variable>
            <relation>
              <xsl:attribute name="type">
                <xsl:text>relatedTo</xsl:text>
              </xsl:attribute>
              <xsl:value-of select="$thisValue"/>
            </relation>
          </xsl:for-each>
        </relationSet>
        <xsl:variable name="rightsSet">
          <rightsSet>
            <rights>
              <xsl:if test="matches(*:Rights, 'NOT EVALUATED')">
                <xsl:attribute name="type">undetermined</xsl:attribute>
              </xsl:if>
              <text>
                <xsl:value-of
                  select="concat(substring(*:Rights, 1, 1), lower-case(substring(*:Rights, 2)))"/>
              </text>
            </rights>
          </rightsSet>
        </xsl:variable>
        <xsl:if test="normalize-space($rightsSet) ne ''">
          <xsl:copy-of select="$rightsSet"/>
        </xsl:if>
        <xsl:variable name="subjectSet">
          <subjectSet>
            <xsl:for-each select="*:Artstor_Classification">
              <subject vocab="artstor">
                <term>
                  <xsl:value-of select="."/>
                </term>
              </subject>
            </xsl:for-each>
            <xsl:for-each select="*:Image_Subject">
              <subject vocab="aat">
                <term>
                  <xsl:value-of select="."/>
                </term>
              </subject>
            </xsl:for-each>
          </subjectSet>
        </xsl:variable>
        <xsl:if test="normalize-space($subjectSet) ne ''">
          <xsl:copy-of select="$subjectSet"/>
        </xsl:if>
        <xsl:variable name="titleSet">
          <titleSet>
            <xsl:choose>
              <xsl:when test="*:Image_View_Type">
                <title>
                  <xsl:value-of select="*:Image_View_Type"/>
                </title>
              </xsl:when>
              <xsl:otherwise>
                <title>
                  <xsl:if test="*:Image_AlternativeTitle">
                    <xsl:attribute name="pref">true</xsl:attribute>
                  </xsl:if>
                  <xsl:value-of select="*:Image_Title"/>
                </title>
                <xsl:for-each select="*:Image_AlternativeTitle">
                  <title>
                    <xsl:value-of select="."/>
                  </title>
                </xsl:for-each>
              </xsl:otherwise>
            </xsl:choose>
          </titleSet>
        </xsl:variable>
        <xsl:if test="normalize-space($titleSet) ne ''">
          <xsl:copy-of select="$titleSet"/>
        </xsl:if>
        <worktypeSet>
          <worktype vocab="Content Types Scheme">still image</worktype>
        </worktypeSet>
        <xsl:comment>&#32;Digital surrogate&#32;</xsl:comment>
        <image>
          <xsl:attribute name="id">
            <xsl:value-of select="concat('i_', replace(*:SSID, '[^\c]', '_'))"/>
          </xsl:attribute>
          <locationSet>
            <location source="localFileName" href="{*:Filename}"/>
            <location source="JStorForum" href="{*:Media_URL}"/>
            <xsl:variable name="ssidMatchExact">
              <xsl:value-of select="concat('^', *:SSID, '$')"/>
            </xsl:variable>
            <xsl:if test="document('jmhoward_iiifMap.xml')">
              <xsl:for-each
                select="document('jmhoward_iiifMap.xml')//*:ssid[matches(normalize-space(.), $ssidMatchExact)]">
                <xsl:if test="normalize-space(../*:imageUrl) ne ''">
                  <location source="ArtStorIIIFimage">
                    <xsl:attribute name="href">
                      <xsl:value-of select="../*:imageUrl"/>
                    </xsl:attribute>
                  </location>
                  <location source="ArtStorImageInContext">
                    <xsl:attribute name="href">
                      <xsl:value-of
                        select="concat('https://library.artstor.org/#/asset/', normalize-space(.))"
                      />
                    </xsl:attribute>
                  </location>
                </xsl:if>
              </xsl:for-each>
            </xsl:if>
          </locationSet>
          <worktypeSet>
            <worktype vocab="LC Content Types">still image</worktype>
          </worktypeSet>
        </image>
      </work>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="*:work" mode="pass3">
    <xsl:copy>
      <xsl:copy-of select="@*"/>
      <xsl:variable name="workAgentSet">
        <agentSet>
          <xsl:for-each select="distinct-values(../*:image/*:Creator)">
            <agent>
              <name>
                <xsl:value-of select="."/>
              </name>
            </agent>
          </xsl:for-each>
        </agentSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workAgentSet) ne ''">
        <xsl:copy-of select="$workAgentSet"/>
      </xsl:if>
      <culturalContextSet>
        <culturalContext>American</culturalContext>
      </culturalContextSet>
      <xsl:variable name="workDateSet">
        <dateSet>
          <display>
            <xsl:value-of select="../descendant::*:Date[normalize-space(.) ne ''][1]"/>
          </display>
          <xsl:if test="../descendant::*:Date_Note">
            <notes>
              <xsl:value-of select="../descendant::*:Date_Note[normalize-space(.) ne ''][1]"/>
            </notes>
          </xsl:if>
          <date>
            <earliestDate>
              <xsl:value-of select="../descendant::*:Earliest_Date[normalize-space(.) ne ''][1]"/>
            </earliestDate>
            <latestDate>
              <xsl:value-of select="../descendant::*:Latest_Date[normalize-space(.) ne ''][1]"/>
            </latestDate>
          </date>
        </dateSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workDateSet) ne ''">
        <xsl:copy-of select="$workDateSet"/>
      </xsl:if>
      <xsl:variable name="workDescriptionSet">
        <descriptionSet>
          <!--<display>
            <xsl:variable name="displayDescription">
              <xsl:for-each select="distinct-values(../descendant::*:Description)">
                <xsl:value-of select="concat(normalize-space(.), ' ')"/>
              </xsl:for-each>
            </xsl:variable>
            <xsl:value-of select="normalize-space($displayDescription)"/>
          </display>-->
          <xsl:for-each select="distinct-values(../descendant::*:Description)">
            <description>
              <xsl:value-of select="normalize-space(.)"/>
            </description>
          </xsl:for-each>
        </descriptionSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workDescriptionSet) ne ''">
        <xsl:copy-of select="$workDescriptionSet"/>
      </xsl:if>
      <xsl:variable name="workLocationSet">
        <!-- Country data point is intentionally omitted because it duplicates what's in coverageGeographic -->
        <locationSet>
          <xsl:for-each
            select="distinct-values(../*:image/*:Location | ../*:image/*:Former_Location)">
            <location>
              <xsl:choose>
                <xsl:when test="matches(., '^demolished')">
                  <xsl:attribute name="type">formerSite</xsl:attribute>
                </xsl:when>
                <xsl:when test="matches(., '^site:')">
                  <xsl:attribute name="type">site</xsl:attribute>
                </xsl:when>
              </xsl:choose>
              <name>
                <xsl:value-of select="replace(., '^site: ', '')"/>
              </name>
            </location>
          </xsl:for-each>
          <xsl:for-each select="distinct-values(../*:image/*:Spatial_coordinates)">
            <location>
              <refid>
                <xsl:value-of select="normalize-space(replace(., ',? *;', ', '))"/>
              </refid>
            </location>
          </xsl:for-each>
        </locationSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workLocationSet) ne ''">
        <xsl:copy-of select="$workLocationSet"/>
      </xsl:if>
      <xsl:variable name="materialSet">
        <materialSet>
          <xsl:for-each select="distinct-values(../*:image/*:Materials_Techniques)">
            <material>
              <xsl:value-of select="."/>
            </material>
          </xsl:for-each>
        </materialSet>
      </xsl:variable>
      <xsl:if test="normalize-space($materialSet) ne ''">
        <xsl:copy-of select="$materialSet"/>
      </xsl:if>
      <xsl:variable name="measurementsSet">
        <measurementsSet>
          <xsl:for-each select="distinct-values(../*:image/*:Measurements)">
            <measurements>
              <xsl:value-of select="."/>
            </measurements>
          </xsl:for-each>
        </measurementsSet>
      </xsl:variable>
      <xsl:if test="normalize-space($measurementsSet) ne ''">
        <xsl:copy-of select="$measurementsSet"/>
      </xsl:if>

      <xsl:if test="../*:image/*:Related_Work">
        <relationSet>
          <xsl:for-each select="distinct-values(../*:image/*:Related_Work)">
            <relation type="relatedTo">
              <xsl:value-of select="."/>
            </relation>
          </xsl:for-each>
        </relationSet>
      </xsl:if>

      <xsl:variable name="stylePeriodSet">
        <stylePeriodSet>
          <xsl:for-each select="distinct-values(../*:image/*:Style_Period)">
            <stylePeriod>
              <xsl:value-of select="."/>
            </stylePeriod>
          </xsl:for-each>
        </stylePeriodSet>
      </xsl:variable>
      <xsl:if test="normalize-space($stylePeriodSet) ne ''">
        <xsl:copy-of select="$stylePeriodSet"/>
      </xsl:if>
      <xsl:variable name="workSubjectSet">
        <subjectSet>
          <xsl:for-each select="distinct-values(../*:image/*:Work_Subject)">
            <subject>
              <term>
                <xsl:value-of select="."/>
              </term>
            </subject>
          </xsl:for-each>
        </subjectSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workSubjectSet) ne ''">
        <xsl:copy-of select="$workSubjectSet"/>
      </xsl:if>
      <xsl:variable name="workAlternativeTitlePresent">
        <xsl:if test="../*:image/*:Work_AlternativeTitle">true</xsl:if>
      </xsl:variable>
      <titleSet>
        <xsl:for-each select="distinct-values(../*:image/*:Work_Title)">
          <title>
            <xsl:if test="matches($workAlternativeTitlePresent, 'true')">
              <xsl:attribute name="pref">true</xsl:attribute>
            </xsl:if>
            <xsl:value-of select="normalize-space(.)"/>
          </title>
        </xsl:for-each>
        <xsl:for-each select="distinct-values(../*:image/*:Work_AlternativeTitle)">
          <title>
            <xsl:value-of select="."/>
          </title>
        </xsl:for-each>
      </titleSet>
      <xsl:variable name="workTypeSet">
        <worktypeSet>
          <xsl:for-each select="distinct-values(../*:image/*:Work_Type)">
            <xsl:if test="not(matches(., 'photograph', 'i'))">
              <worktype>
                <xsl:value-of select="."/>
              </worktype>
            </xsl:if>
          </xsl:for-each>
        </worktypeSet>
      </xsl:variable>
      <xsl:if test="normalize-space($workTypeSet) ne ''">
        <xsl:copy-of select="$workTypeSet"/>
      </xsl:if>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="*:Title" mode="pass1">
    <xsl:choose>
      <xsl:when test="matches(../*:Work_Type, 'photograph')">
        <xsl:if test="../*:Relationships">
          <xsl:analyze-string select="../*:Relationships" regex="\|">
            <xsl:non-matching-substring>
              <xsl:variable name="elementName">
                <xsl:choose>
                  <xsl:when test="position() = 1">
                    <xsl:text>Work_Title</xsl:text>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:text>Work_AlternativeTitle</xsl:text>
                  </xsl:otherwise>
                </xsl:choose>
              </xsl:variable>
              <xsl:element name="{$elementName}">
                <xsl:value-of select="normalize-space(.)"/>
              </xsl:element>
            </xsl:non-matching-substring>
          </xsl:analyze-string>
        </xsl:if>
        <Image_Title>
          <xsl:value-of select="normalize-space(.)"/>
        </Image_Title>
      </xsl:when>
      <xsl:otherwise>
        <xsl:analyze-string select="." regex="\|">
          <xsl:non-matching-substring>
            <xsl:variable name="elementName">
              <xsl:choose>
                <xsl:when test="position() = 1">
                  <xsl:text>Work_Title</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>Work_AlternativeTitle</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:element name="{$elementName}">
              <xsl:value-of select="normalize-space(.)"/>
            </xsl:element>
          </xsl:non-matching-substring>
        </xsl:analyze-string>
        <xsl:analyze-string select="." regex="\|">
          <xsl:non-matching-substring>
            <xsl:variable name="elementName">
              <xsl:choose>
                <xsl:when test="position() = 1">
                  <xsl:text>Image_Title</xsl:text>
                </xsl:when>
                <xsl:otherwise>
                  <xsl:text>Image_AlternativeTitle</xsl:text>
                </xsl:otherwise>
              </xsl:choose>
            </xsl:variable>
            <xsl:element name="{$elementName}">
              <xsl:value-of select="normalize-space(.)"/>
            </xsl:element>
          </xsl:non-matching-substring>
        </xsl:analyze-string>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="*:Creator | *:Artstor_Classification" mode="pass1">
    <xsl:variable name="elementName">
      <xsl:value-of select="local-name(.)"/>
    </xsl:variable>
    <xsl:analyze-string select="." regex="\|">
      <xsl:non-matching-substring>
        <xsl:element name="{$elementName}">
          <xsl:value-of select="normalize-space(.)"/>
        </xsl:element>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template match="*:Relationships" mode="pass1">
    <xsl:variable name="elementName">
      <xsl:text>Related_Work</xsl:text>
    </xsl:variable>
    <xsl:analyze-string select="." regex="\|">
      <xsl:non-matching-substring>
        <xsl:element name="{$elementName}">
          <xsl:value-of select="normalize-space(.)"/>
        </xsl:element>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template match="*:Location" mode="pass1">
    <xsl:variable name="places">
      <xsl:analyze-string select="." regex=",">
        <xsl:non-matching-substring>
          <place>
            <xsl:value-of select="normalize-space(.)"/>
          </place>
        </xsl:non-matching-substring>
      </xsl:analyze-string>
    </xsl:variable>
    <Location>
      <xsl:for-each select="distinct-values($places//*:place)">
        <xsl:if test="position() &gt; 1">, </xsl:if>
        <xsl:value-of select="."/>
      </xsl:for-each>
    </Location>
  </xsl:template>

  <xsl:template match="*:Image_Subject | *:Work_Type" mode="pass1">
    <xsl:variable name="elementName">
      <xsl:value-of select="local-name(.)"/>
    </xsl:variable>
    <xsl:analyze-string select="." regex=";">
      <xsl:non-matching-substring>
        <xsl:element name="{$elementName}">
          <xsl:value-of select="normalize-space(.)"/>
        </xsl:element>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template match="*:Work_Subject" mode="pass1">
    <xsl:variable name="elementName">
      <xsl:choose>
        <xsl:when test="../*:Work_Type[matches(., 'photographs')]">
          <xsl:text>Image_Subject</xsl:text>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="local-name(.)"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:analyze-string select="." regex=";">
      <xsl:non-matching-substring>
        <xsl:element name="{$elementName}">
          <xsl:value-of select="normalize-space(.)"/>
        </xsl:element>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template match="*:Photographer | *:Style_Period" mode="pass1">
    <xsl:variable name="elementName">
      <xsl:value-of select="local-name(.)"/>
    </xsl:variable>
    <xsl:analyze-string select="." regex=";">
      <xsl:non-matching-substring>
        <xsl:element name="{$elementName}">
          <xsl:value-of select="normalize-space(.)"/>
        </xsl:element>
      </xsl:non-matching-substring>
    </xsl:analyze-string>
  </xsl:template>

  <xsl:template match="* | comment() | @*" mode="#all">
    <xsl:copy>
      <xsl:apply-templates select="node() | comment() | @*" mode="#current"/>
    </xsl:copy>
  </xsl:template>

  <xsl:template match="text()" mode="#all">
    <xsl:value-of select="normalize-space(.)"/>
  </xsl:template>

</xsl:stylesheet>
